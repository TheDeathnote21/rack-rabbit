#!/usr/bin/env ruby
# encoding: utf-8

#==============================================================================
# PARSE COMMAND LINE OPTIONS
#==============================================================================

require 'optparse'

action  = :run
options = { :rabbit => {} }

host_help          = "the rabbitMQ broker IP address (default: 127.0.0.1)"
port_help          = "the rabbitMQ broker port (default: 5672)"
exchange_help      = "publish to a non-default exchange - name"
exchange_type_help = "publish to a non-default exchange - type (e.g. :direct, :fanout, :topic)"
routing_key_help   = "a routing key when publishing to a non-default exchange"
include_help       = "specify an additional $LOAD_PATH (may be used more than once)"
debug_help         = "set $DEBUG to true"
warn_help          = "enable warnings"

op = OptionParser.new
op.banner = "Publish an asynchronous request to a rabbitMQ exchange with a routing key"
op.separator ""
op.separator "Usage: publish [options] [METHOD] [PATH] [BODY]"
op.separator ""
op.separator "Examples:"
op.separator ""
op.separator " publish -e my.exchange -t fanout            POST /event                 # POST to a fanout exchange and continue"
op.separator " publish -e my.exchange -t topic -r my.topic POST /submit 'some data'    # POST to a topic exchange with routing key and continue"
op.separator ""

op.separator "RackRabbit options:"
op.on(      "--host HOST",         host_help)          { |value| options[:rabbit][:host] = value }
op.on(      "--port PORT",         port_help)          { |value| options[:rabbit][:port] = value }
op.on("-e", "--exchange EXCHANGE", exchange_help)      { |value| options[:exchange]      = value }
op.on("-t", "--type TYPE",         exchange_type_help) { |value| options[:exchange_type] = value }
op.on("-r", "--route ROUTE",       routing_key_help)   { |value| options[:routing_key]   = value }

op.separator ""
op.separator "Ruby options:"
op.on("-I", "--include PATH", include_help) { |value| $LOAD_PATH.unshift(*value.split(":")) }
op.on(      "--debug",        debug_help)   { $DEBUG = true }
op.on(      "--warn",         warn_help)    { $-w = true    }

op.separator ""
op.separator "Common options:"
op.on("-h", "--help")    { action = :help    }
op.on("-v", "--version") { action = :version }

op.separator ""
op.parse!(ARGV)

if options[:method] = [ :GET, :POST, :PUT, :DELETE ].find{|m| m == ARGV[0].to_s.upcase.to_sym }
  ARGV.delete_at(0)
else
  options[:method] = :GET
end

options[:path] ||= ARGV.shift
options[:body] ||= ARGV.shift

#==============================================================================
# EXECUTE script
#==============================================================================

require 'rack-rabbit/client'

case action
when :help    then puts op.to_s
when :version then puts RackRabbit::VERSION
else
  puts RackRabbit::Client.publish(options[:exchange], options)
end

#==============================================================================
