#!/usr/bin/env ruby
# encoding: utf-8

#==============================================================================
# PARSE COMMAND LINE OPTIONS
#==============================================================================

require 'optparse'

action  = :run
options = { :rabbit => {} }

host_help    = "the rabbitMQ broker IP address (default: 127.0.0.1)"
port_help    = "the rabbitMQ broker port (default: 5672)"
queue_help   = "a queue for publishing outgoing requests"
include_help = "specify an additional $LOAD_PATH (may be used more than once)"
debug_help   = "set $DEBUG to true"
warn_help    = "enable warnings"

op = OptionParser.new
op.banner = "Make a synchronous request to a rabbitMQ queue and wait for a reply"
op.separator ""
op.separator "Usage: request [options] [METHOD] [PATH] [BODY]"
op.separator ""
op.separator "Examples:"
op.separator ""
op.separator " request -q my.queue GET  /hello"
op.separator " request -q my.queue POST /submit 'some data'"
op.separator ""

op.separator "RackRabbit options:"
op.on(      "--host HOST",   host_help)  { |value| options[:rabbit][:host] = value }
op.on(      "--port PORT",   port_help)  { |value| options[:rabbit][:port] = value }
op.on("-q", "--queue QUEUE", queue_help) { |value| options[:queue]         = value }

op.separator ""
op.separator "Ruby options:"
op.on("-I", "--include PATH", include_help) { |value| $LOAD_PATH.unshift(*value.split(":")) }
op.on(      "--debug",        debug_help)   { $DEBUG = true }
op.on(      "--warn",         warn_help)    { $-w = true    }

op.separator ""
op.separator "Common options:"
op.on("-h", "--help")    { action = :help    }
op.on("-v", "--version") { action = :version }

op.separator ""
op.parse!(ARGV)

if options[:method] = [ :GET, :POST, :PUT, :DELETE ].find{|m| m == ARGV[0].to_s.upcase.to_sym }
  ARGV.delete_at(0)
else
  options[:method] = :GET
end

options[:path] ||= ARGV.shift
options[:body] ||= ARGV.shift

#==============================================================================
# EXECUTE script
#==============================================================================

require 'rack-rabbit/client'

case action
when :help    then puts op.to_s
when :version then puts RackRabbit::VERSION
else
  puts RackRabbit::Client.request(options[:queue], options)
end

#==============================================================================
