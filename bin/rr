#!/usr/bin/env ruby
# encoding: utf-8
#
# Make requests to a RackRabbit server.
#

#==============================================================================
# PARSE COMMAND LINE OPTIONS
#==============================================================================

require 'optparse'

action  = :run
options = { :rabbit => {} }

routing_key_help = "the routing key used to publish the message (e.g. a queue name)"
host_help        = "the rabbitMQ broker IP address (default: 127.0.0.1)"
port_help        = "the rabbitMQ broker port (default: 5672)"
include_help     = "specify an additional $LOAD_PATH (may be used more than once)"
debug_help       = "set $DEBUG to true"
warn_help        = "enable warnings"

op = OptionParser.new
op.banner = "Publish messages to a rabbitMQ broker"
op.separator ""
op.separator "Usage: rr [options] [TYPE] [METHOD] [PATH] [BODY]"
op.separator ""
op.separator "where [TYPE] is the communication style, one of:"
op.separator "  REQUEST: make a synchronous request/response uaing a queue (DEFAULT)"
op.separator "  ENQUEUE: make an asynchronous worker request using a queue"
op.separator "  PUBLISH: publish an asynchronous message to an exchange (TODO)"
op.separator ""
op.separator "and [METHOD] is an (optional) request method [ GET (DEFAULT) | POST | PUT | DELETE ]"
op.separator ""
op.separator "Examples:"
op.separator ""
op.separator " rr -r my.queue         GET  /hello                 # submit GET to queue and wait for response"
op.separator " rr -r my.queue         POST /submit 'some data'    # submit POST to queue and wait for response"
op.separator " rr -r my.queue ENQUEUE POST /submit 'some data'    # submit POST to queue and continue"
op.separator ""

op.separator "RackRabbit options:"
op.on(      "--host HOST",     host_help)        { |value| options[:rabbit][:host] = value                      }
op.on(      "--port PORT",     port_help)        { |value| options[:rabbit][:port] = value                      }
op.on("-r", "--route ROUTE",   routing_key_help) { |value| options[:routing_key]   = value                      }

op.separator ""
op.separator "Ruby options:"
op.on("-I", "--include PATH", include_help) { |value| $LOAD_PATH.unshift(*value.split(":")) }
op.on(      "--debug",        debug_help)   { $DEBUG = true }
op.on(      "--warn",         warn_help)    { $-w = true    }

op.separator ""
op.separator "Common options:"
op.on("-h", "--help")    { action = :help    }
op.on("-v", "--version") { action = :version }

op.separator ""
op.parse!(ARGV)

if options[:type] = [ :REQUEST, :ENQUEUE, :PUBLISH ].find{|a| a == ARGV[0].to_s.upcase.to_sym }
  ARGV.delete_at(0)
else
  options[:type] = :REQUEST
end

if options[:method] = [ :GET, :POST, :PUT, :DELETE ].find{|m| m == ARGV[0].to_s.upcase.to_sym }
  ARGV.delete_at(0)
else
  options[:method] = :GET
end

options[:path] ||= ARGV.shift
options[:body] ||= ARGV.shift

#==============================================================================
# EXECUTE script (within an EM reactor if necessary)
#==============================================================================

require 'rack-rabbit/client'

case action
when :help    then puts op.to_s
when :version then puts RackRabbit::VERSION
else
  case options[:type]
  when :REQUEST then puts RackRabbit::Client.request(options)
  when :ENQUEUE then puts RackRabbit::Client.request(options)
  when :PUBLISH then puts "PUBLISH NOT IMPLEMENTED YET"
  else
    raise ArgumentError, "unknown type #{options[:type]}"
  end
end

#==============================================================================
